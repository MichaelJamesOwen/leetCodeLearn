给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。

你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。

此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

 

示例 1：

输入：s = "3[a]2[bc]"
输出："aaabcbc"
示例 2：

输入：s = "3[a2[c]]"
输出："accaccacc"
示例 3：

输入：s = "2[abc]3[cd]ef"
输出："abcabccdcdcdef"
示例 4：

输入：s = "abc3[cd]xyz"
输出："abccdcdcdxyz"

//又是运行不通过的一次 在自己机器上可以

class Solution {
public:
    string decodeString(string s) 
    {
        string ret;
        stack<char> temp;
        for (int i = 0; i < s.length(); i++)
        {
            if (s[i] >= '0' && s[i] <= '9')
            {
                temp.push(s[i]);
            }
            else  if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z')
            {
                if (temp.empty())
                {
                    ret.push_back(s[i]);
                }
                else
                {
                    temp.push(s[i]);
                }
            }
            else
            {
                if (s[i] == ']')
                {
                    string tempChar = "";
                    while (true)
                    {
                        char cOne = temp.top();
                        temp.pop();

                        if (cOne >= '0' && cOne <= '9')
                        {
                            for (int k = 0; k < atoi(&cOne); k++)
                            {
                                for (int j = 0; j < tempChar.length(); j++)
                                {
                                    temp.push(tempChar[j]);
                                }
                            }
                            
                            break;
                        }
                        else  if (cOne >= 'a' && cOne <= 'z' || cOne >= 'A' && cOne <= 'Z')
                        {
                            string sss; sss = cOne;
                            tempChar.insert(0, sss);
                        }
                    }
                }
                else
                {
                    temp.push(s[i]);
                }
            }
        }

        string sss = "";
        while (!temp.empty())
        {
            char cOne = temp.top();
            temp.pop();
            string ss; ss = cOne;
            sss.insert(0, ss);
        }
       
        ret.insert(ret.length(), sss);

        return ret;
    }
};
