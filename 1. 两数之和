给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//第一次提交
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> vResult;
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = i + 1; j < nums.size(); j++)
            {
                if (nums[i] + nums[j] == target)
                {
                    vResult.push_back(i);
                    vResult.push_back(j);
                    return vResult;
                }
            }
        }
        return vResult;
    }
};

//未提交之中间思路，区别，此处先push下标再push
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> vResult;
        map<int, int> mTest;
        for(int i = 0; i < nums.size(); i++)
        {
            mTest[nums[i]] = i;
        }
        
        for(int i = 0; i < nums.size(); i++)
        {
            int key = target - nums[i];
            auto it = mTest.find(key);
            if (it != mTest.end())
            {
                vResult.push_back(i);
                vResult.push_back(mTest[key]);
                return vResult;
            }
        }
        return vResult;
    }
};

//第二次提交
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> vResult;
        map<int, int> mTest;
        for(int i = 0; i < nums.size(); i++)
        {
            int key = target - nums[i];
            auto it = mTest.find(key);
            if (it != mTest.end())
            {
                vResult.push_back(mTest[key]);
                vResult.push_back(i);
                return vResult;
            }
            
            mTest[nums[i]] = i;
        }
        return vResult;
    }
};

