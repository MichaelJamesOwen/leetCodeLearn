给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

 

示例 1：

输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6
示例 2：

输入：lists = []
输出：[]
示例 3：

输入：lists = [[]]
输出：[]

//自己想到合并两个链表
class Solution {
public:

    void help(ListNode** pHead, ListNode* pOne)
    {
        if (*pHead == nullptr)
        {
            *pHead = pOne;
            return;
        }

        ListNode* p1 = *pHead;
        ListNode* p2 = pOne;
        ListNode* p1Last = *pHead;
        while (p1 && p2)
        {
            p1Last = p1;
            if (p1->val <= p2->val)
            {
                p1 = p1->next;
            }
            else
            {
                ListNode* pTemp2 = p2;
                p2 = p2->next;

                swap(p1->val, pTemp2->val);
                ListNode* pTemp1 = p1->next;
                p1->next = pTemp2;
                pTemp2->next = pTemp1;

                p1 = p1->next;
            }
        }

        if (p2)
        {
            p1Last->next = p2;
        }
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        ListNode* pHead = nullptr;

        for (int i = 0; i < lists.size(); i++)
        {
            help(&pHead, lists[i]);
        }

        return pHead;
    }
};

//标准答案运用优先队列（堆）进行计算，将所有数值压进去，这样就得到了从小到大的队列
class Solution {
public:
    struct Status 
    {
        int val;
        ListNode* ptr;
        bool operator < (const Status& rhs) const 
        {
            return val > rhs.val;
        }
    };

    priority_queue <Status> q;

    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        for (auto node : lists) 
        {
            if (node) 
            {
                q.push({ node->val, node });
            }
        }
        ListNode head, * tail = &head;
        while (!q.empty()) 
        {
            auto f = q.top(); q.pop();
            tail->next = f.ptr;
            tail = tail->next;
            if (f.ptr->next) 
            {
                q.push({ f.ptr->next->val, f.ptr->next });
            }
        }

        return head.next;
    }
};
