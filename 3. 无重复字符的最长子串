给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//第一次提交
class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int nMaxLength = 0;
        for (int i = 0; i < s.length(); i++)
        {
            map<char, int> mTemp;
            mTemp[s[i]] = 1;
            int nTempLength = 1;
            for (int j = i + 1; j < s.length(); j++)
            {
                if (mTemp.find(s[j]) == mTemp.end())
                {
                    mTemp[s[j]] = 1;
                    nTempLength++;
                }
                else
                {
                    break;
                }
            }

            if (nTempLength > nMaxLength)
            {
                nMaxLength = nTempLength;
            }
        }
        return nMaxLength;
    }
};

第二次提交
class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int nMaxLength = 0;
        int nTempLength = 0;
        map<char, int> mTemp;
        int nNowBegin = 0;
        for (int i = 0; i < s.length(); i++)
        {
            if (mTemp.find(s[i]) == mTemp.end())
            {
                mTemp[s[i]] = i;
            }
            else
            {
                int nOldBegin = nNowBegin;
                nNowBegin = mTemp[s[i]] + 1;
                for (int j = nOldBegin; j < nNowBegin; j++)
                {
                    mTemp.erase(s[j]);
                }
                nTempLength -= nNowBegin - nOldBegin;
                mTemp[s[i]] = i;
            }

            nTempLength++;

            if (nTempLength > nMaxLength)
            {
                nMaxLength = nTempLength;
            }
        }
        return nMaxLength;
    }
};

//第三次提交
class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int nMaxLength = 0;
        int nTempLength = 0;
        map<char, int> mTemp;
        int nNowBegin = 0;
        for (int i = 0; i < s.length(); i++)
        {
            if (mTemp.find(s[i]) == mTemp.end() || mTemp[s[i]] < nNowBegin)
            {
                mTemp[s[i]] = i;
            }
            else
            {
                int nOldBegin = nNowBegin;
                nNowBegin = mTemp[s[i]] + 1;
                nTempLength -= nNowBegin - nOldBegin;
                mTemp[s[i]] = i;
            }

            nTempLength++;

            if (nTempLength > nMaxLength)
            {
                nMaxLength = nTempLength;
            }
        }
        return nMaxLength;
    }
};

//第四次提交
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int nMaxLength = 0;
        int nTempLength = 0;
        unordered_map<char, int> mTemp;
        int nNowBegin = 0;
        for (int i = 0; i < s.length(); i++)
        {
            if (mTemp.find(s[i]) == mTemp.end() || mTemp[s[i]] < nNowBegin)
            {
                mTemp[s[i]] = i;
            }
            else
            {
                int nOldBegin = nNowBegin;
                nNowBegin = mTemp[s[i]] + 1;
                nTempLength -= nNowBegin - nOldBegin;
                mTemp[s[i]] = i;
            }

            nTempLength++;

            if (nTempLength > nMaxLength)
            {
                nMaxLength = nTempLength;
            }
        }
        return nMaxLength;
    }
};

//标准答案
int lengthOfLongestSubstring(string s) {
        // 哈希集合，记录每个字符是否出现过
        unordered_set<char> occ;
        int n = s.size();
        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
        int rk = -1, ans = 0;
        // 枚举左指针的位置，初始值隐性地表示为 -1
        for (int i = 0; i < n; ++i) {
            if (i != 0) {
                // 左指针向右移动一格，移除一个字符
                occ.erase(s[i - 1]);
            }
            while (rk + 1 < n && !occ.count(s[rk + 1])) {
                // 不断地移动右指针
                occ.insert(s[rk + 1]);
                ++rk;
            }
            // 第 i 到 rk 个字符是一个极长的无重复字符子串
            ans = max(ans, rk - i + 1);
        }
        return ans;
    }
