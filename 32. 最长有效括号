给你一个只包含 '(' 和 ')' 的字符串，找出最长有效（格式正确且连续）括号子串的长度。

示例 1：

输入：s = "(()"
输出：2
解释：最长有效括号子串是 "()"
示例 2：

输入：s = ")()())"
输出：4
解释：最长有效括号子串是 "()()"
示例 3：

输入：s = ""
输出：0

//抄答案抄到现在总算是有点心得
//首先我们必须确定状态是什么dp[i]数组就是当前的状态，在这道题目中，dp[i]表示以下标字符结尾的最长有效括号的长度。
//然后我们要建立状态转移方程，这特么是最难的，要找到特么的鸡儿规律。
if (dp[i] == '(')
{
    dp[i] = 0;
}

if (dp[i] == ')' && dp[i - 1] == '(')
{
    dp[i] = dp[i−2]+2
}

if (s[i]=')' && s[i−1]=')' && s[i-dp[i-1]-1] == '(')
{
    dp[i]=dp[i−1]+dp[i−dp[i−1]−2]+2;
}

//就根据这些鬼东西写代码

class Solution {
public:
    int longestValidParentheses(string s) {
        int maxans = 0, n = s.length();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            if (s[i] == ')') {
                if (s[i - 1] == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                maxans = max(maxans, dp[i]);
            }
        }
        return maxans;
    }
};
