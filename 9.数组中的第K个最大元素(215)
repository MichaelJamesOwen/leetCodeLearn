给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。

请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

//自己的解法，思想与官方解法（堆）一致，只不过用了链表，应该用堆的。
int findKthLargest(vector<int>& nums, int k) 
{
    list<int> temp;
    for (int i = 0; i < nums.size(); i++)
    {
        if (temp.size() == 0)
        {
            temp.push_back(nums[i]);
            continue;
        }

        if (temp.size() == k && nums[i] < temp.back())
        {
            continue;
        }

        bool b = false;
        for (auto it = temp.begin(); it != temp.end(); it++)
        {
            if (nums[i] > *it)
            {
                temp.insert(it, nums[i]);
                if (temp.size() > k)
                {
                    temp.pop_back();
                }
                b = true;
                break;
            }
        }

        if (!b && temp.size() < k)
        {
            temp.push_back(nums[i]);
        }
    }

    return temp.back();
}

//自己写的快速排序
class Solution {
public:
    void fastsort(vector<int>& nums, int i, int j, int k)
    {
        int n = i;
        int m = j;
        int index = n;
        while (n < m)
        {
            if (nums[n] <= nums[m])
            {
                int temp = nums[n];
                nums[n] = nums[m];
                nums[m] = temp;
                if (index == n)
                {
                    index = m;
                    n++;
                }
                else
                {
                    index = n;
                    m--;
                }
            }
            else
            {
                if (index == n)
                {
                    m--;
                }
                else
                {
                    n++;
                }
            }
        }

        if (index < k - 1)
        {
            fastsort(nums, index + 1, j, k);
        }
        else if (index > k - 1)
        {
            fastsort(nums, i, index - 1, k);
        }
    }

    int findKthLargest(vector<int>& nums, int k) 
    {
        fastsort(nums, 0, nums.size() - 1, k);
        return nums[k - 1];
    }
};

//标准答案快速选择，思路是找到快排轴与k的关系，这样可以减少很多排序过程
//快排思路：通过一个index标记当前轴的位置，利用j进行遍历，小于目标值，则右移index，交换index与j的位置，index就是当前目标值的所在地。
class Solution {
public:
    int quickSelect(vector<int>& a, int l, int r, int index) 
    {
        int q = randomPartition(a, l, r);
        if (q == index) 
        {
            return a[q];
        }
        else 
        {
            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);
        }
    }

    inline int randomPartition(vector<int>& a, int l, int r) 
    {
        int i = rand() % (r - l + 1) + l;
        swap(a[i], a[r]);
        return partition(a, l, r);
    }

    inline int partition(vector<int>& a, int l, int r) 
    {
        int x = a[r], i = l - 1;
        for (int j = l; j < r; ++j) {
            if (a[j] <= x) {
                swap(a[++i], a[j]);
            }
        }
        swap(a[i + 1], a[r]);
        return i + 1;
    }

    int findKthLargest(vector<int>& nums, int k) 
    {
        srand(time(0));
        return quickSelect(nums, 0, nums.size() - 1, nums.size() - k);
    }
};

//自己做的堆排序
class Solution {
public:
    void createTree(vector<int>& nums, int len)
    {
        int index = len / 2 - 1;
        while (index >= 0)
        {
            if (nums[index * 2 + 1] >= nums[index])
            {
                int temp = nums[index];
                nums[index] = nums[index * 2 + 1];
                nums[index * 2 + 1] = temp;
            }

            if (index * 2 + 2 < len && nums[index * 2 + 2] >= nums[index])
            {
                int temp = nums[index];
                nums[index] = nums[index * 2 + 2];
                nums[index * 2 + 2] = temp;
            }

            index--;
        }
    }

    int findKthLargest(vector<int>& nums, int k) 
    { 
        for (size_t i = 0; i < k; i++)
        {
            createTree(nums, nums.size() - i);

            int temp = nums[0];
            nums[0] = nums[nums.size() - i - 1];
            nums[nums.size() - i - 1] = temp;
        }
        
        return nums[nums.size() - k];
    }
};


//官方堆排序，比起我得排序，我每次都在建立树，而不是从上往下只对改变的分支进行重新计算
class Solution {
public:
    void maxHeapify(vector<int>& a, int i, int heapSize) 
    {
        int l = i * 2 + 1, r = i * 2 + 2, largest = i;
        if (l < heapSize && a[l] > a[largest]) 
        {
            largest = l;
        }
        if (r < heapSize && a[r] > a[largest]) 
        {
            largest = r;
        }
        if (largest != i) 
        {
            swap(a[i], a[largest]);
            maxHeapify(a, largest, heapSize);
        }
    }

    void buildMaxHeap(vector<int>& a, int heapSize) 
    {
        for (int i = heapSize / 2; i >= 0; --i) 
        {
            maxHeapify(a, i, heapSize);
        }
    }

    int findKthLargest(vector<int>& nums, int k) 
    {
        int heapSize = nums.size();
        buildMaxHeap(nums, heapSize);
        for (int i = nums.size() - 1; i >= nums.size() - k + 1; --i) 
        {
            swap(nums[0], nums[i]);
            --heapSize;
            maxHeapify(nums, 0, heapSize);
        }
        return nums[0];
    }
};
