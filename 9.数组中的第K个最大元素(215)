给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。

请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

//自己的解法，思想与官方解法（堆）一致，只不过用了链表，应该用堆的。
int findKthLargest(vector<int>& nums, int k) 
{
    list<int> temp;
    for (int i = 0; i < nums.size(); i++)
    {
        if (temp.size() == 0)
        {
            temp.push_back(nums[i]);
            continue;
        }

        if (temp.size() == k && nums[i] < temp.back())
        {
            continue;
        }

        bool b = false;
        for (auto it = temp.begin(); it != temp.end(); it++)
        {
            if (nums[i] > *it)
            {
                temp.insert(it, nums[i]);
                if (temp.size() > k)
                {
                    temp.pop_back();
                }
                b = true;
                break;
            }
        }

        if (!b && temp.size() < k)
        {
            temp.push_back(nums[i]);
        }
    }

    return temp.back();
}

//自己写的快速排序
class Solution {
public:
    void fastsort(vector<int>& nums, int i, int j, int k)
    {
        int n = i;
        int m = j;
        int index = n;
        while (n < m)
        {
            if (nums[n] <= nums[m])
            {
                int temp = nums[n];
                nums[n] = nums[m];
                nums[m] = temp;
                if (index == n)
                {
                    index = m;
                    n++;
                }
                else
                {
                    index = n;
                    m--;
                }
            }
            else
            {
                if (index == n)
                {
                    m--;
                }
                else
                {
                    n++;
                }
            }

            
        }

        if (index < k - 1)
        {
            fastsort(nums, index + 1, j, k);
        }
        else if (index > k - 1)
        {
            fastsort(nums, i, index - 1, k);
        }
    }

    int findKthLargest(vector<int>& nums, int k) 
    {
        fastsort(nums, 0, nums.size() - 1, k);
        return nums[k - 1];
    }
};

//标准答案快速选择，思路是找到快排轴与k的关系，这样可以减少很多排序过程
class Solution {
public:
    void fastsort(vector<int>& nums, int i, int j, int k)
    {
        int n = i;
        int m = j;
        int index = n;
        while (n < m)
        {
            if (nums[n] <= nums[m])
            {
                int temp = nums[n];
                nums[n] = nums[m];
                nums[m] = temp;
                if (index == n)
                {
                    index = m;
                    n++;
                }
                else
                {
                    index = n;
                    m--;
                }
            }
            else
            {
                if (index == n)
                {
                    m--;
                }
                else
                {
                    n++;
                }
            }

            
        }

        if (index < k - 1)
        {
            fastsort(nums, index + 1, j, k);
        }
        else if (index > k - 1)
        {
            fastsort(nums, i, index - 1, k);
        }
    }

    int findKthLargest(vector<int>& nums, int k) 
    {
        fastsort(nums, 0, nums.size() - 1, k);
        return nums[k - 1];
    }
};
