给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-two-numbers
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbersHelp(ListNode* l1, ListNode* l2, int nAdd)
    {
        if (l1 == nullptr and l2 == nullptr and nAdd == 0)
        {
            return nullptr;
        }
        
        ListNode* pNode = new ListNode(0);

        int n = 0;
        int m = 0;
        if (l1 != nullptr)
        {
            n = l1->val;
        }
        if (l2 != nullptr)
        {
            m = l2->val;
        }

        int sum = n + m + nAdd;

        pNode->val = sum % 10;

        pNode->next = addTwoNumbersHelp(l1 != nullptr ? l1->next : nullptr, l2 != nullptr ? l2->next : nullptr, sum / 10);
        return pNode;
    }


    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        ListNode* pFinal = nullptr;

        pFinal = addTwoNumbersHelp(l1, l2, 0);

        return pFinal;
    }
};
