实现获取 下一个排列 的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须 原地 修改，只允许使用额外常数空间。


示例 1：

输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：

输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：

输入：nums = [1,1,5]
输出：[1,5,1]
示例 4：

输入：nums = [1]
输出：[1]

//一种算法，首先要找到i < i + 1的数字
//其次如果i不为0那么交换其右侧的一个小与i的值（从右向左）
//交换彼此
//最后将i之后的数组翻转

class Solution {
public:
    void nextPermutation(vector<int>& nums) 
    {
        int i = nums.size() - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) 
        {
            i--;
        }
        if (i >= 0) 
        {
            int j = nums.size() - 1;
            while (j >= 0 && nums[i] >= nums[j]) 
            {
                j--;
            }
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());
    }
};
