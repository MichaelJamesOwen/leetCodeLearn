给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例 1：

输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。

1、暴力解法
class Solution {
public:
    int maxSubArray(vector<int>& nums)
    {
        if (nums.size() == 1)
        {
            return nums[0];
        }

        int max = nums[0];
        for (int i = 0; i < nums.size(); i++)
        {
            int temp = nums[i];
            if (temp > max)
            {
                max = temp;
            }
            for (int j = i + 1; j < nums.size(); j++)
            {
                temp += nums[j];
                if (temp > max)
                {
                    max = temp;
                }
            }
        }

        return max;
    }
};

2、动态规划
怎么也想不出状态转移方程，跟大捆子探讨发现推到状态转移方程是一个极难的事情，所以不较真，开始刷题
（1）定义一个函数f(n)，以第n个数为结束点的子数列的最大和，存在一个递推关系f(n) = max(f(n-1) + A[n], A[n]);
（2）将这些最大和保存下来后，取最大的那个就是，最大子数组和。因为最大连续子数组 等价于 最大的以n个数为结束点的子数列和

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size() == 0) return NULL;
        int res = INT_MIN;
        int f_n = -1;
        for(int i = 0; i < nums.size(); ++i){
            f_n = max(nums[i], f_n + nums[i]);
            res = max(f_n, res);
        }
        return res;
    }
};
